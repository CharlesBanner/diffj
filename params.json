{"name":"Diffj","body":"DiffJ\r\n=====\r\n\r\nDiffJ compares Java files based on their code, without regard to formatting,\r\norganization, comments, or whitespace. Differences are reported as to the\r\nprecise type of change.\r\n\r\nDiffJ was designed for comparing code when refactoring and reformatting,\r\nwith the differences narrowed to the extent possible, thus isolating changes.\r\n\r\nSUMMARY\r\n-------\r\n\r\ndiffj [ options ] from-file to-file\r\n\r\nFEATURES\r\n--------\r\n\r\n**Understanding Java content**: DiffJ handles Java syntax (through version 1.6,\r\nat this writing), and compares code based on the actual Java code, not\r\nline-by-line.\r\n\r\nFor example, the following are considered equivalent:\r\n\r\n<pre><code>    Integer[] ary  =  new Integer[ index( str, ch ) + str.length( ) ];\r\n    \r\n    Integer[] ary = new Integer[index(str, ch) + str.length()];\r\n</code></pre>\r\n\r\n**Ignoring whitespace**. DiffJ ignores whitespace when comparing code, so it\r\nworks well when, for example, tabs have been replaced with spaces, when\r\nindentation levels have changed, or when the end-of-line style has changed.\r\n\r\n**Ignoring order of declarations**. DiffJ does not consider the organization of\r\nthe code, such as the order of methods within a class. Thus if methods are\r\nreordered (perhaps by accessibility), DiffJ will not report that as being a\r\ndifference, since the code itself has not changed. The order of declarations\r\napplies to all Java type declarations (inner classes, fields, methods, and\r\nconstructors).\r\n\r\n**Ignoring order of import statements**. As with declarations, DiffJ does not\r\nconsider reordered import statements to be a change in the code.\r\n\r\n**Ignoring comments**: DiffJ skips comments when comparing code. Thus comments\r\nthat have been <font color=\"red\">updated</font> (perhaps as a result of running DoctorJ) will not be seen\r\nas a change.\r\n\r\n**Showing added and deleted declarations**: DiffJ reports declarations that have\r\nbeen added and deleted, described by their Java type. For example:\r\n\r\n<pre><code>d0/Removed.java <=> d1/Removed.java\r\n2,3d1,4 method removed: contender(Double[], StringBuilder)\r\n  class Removed {\r\n!     public <span class=\"s0\">void contender(Double[] dary, StringBuilder sb) {</span>\r\n!     <span class=\"p\">}</span>\r\n  \r\n      public void contender() {\r\n      }\r\n</code></pre>\r\n\r\n**Showing parameters**: DiffJ reports constructor and methods parameters that have\r\nbeen added, deleted, and changed:\r\n\r\n<pre><code>2c2 parameter name changed from idx to index\r\n  class Changed {\r\n!     void changed(int <span style=\"color: red; background: black\">idx</span>) {\r\n      }\r\n  }\r\n\r\n  class Changed {\r\n!     void changed(int <span style=\"color: yellow; background: black\">index</span>) {\r\n      }\r\n  }\r\n</code></pre>\r\n\r\n**Showing code differences narrowly**: DiffJ reports the actual location (lines\r\nand columns) of code changes, and the output (in context and highlight mode)\r\ndisplays the exact change. Thus if a variable changes within a line of code,\r\nthat variable itself is highlighted for the from- and to-files.\r\n\r\n**An example**: the example below is contrived, in that differences are marked\r\n&lt;like so;&gt;. In the real world (where GitHub doesn't strip font colors) the\r\noutput is in glorious color(s).\r\n\r\n<pre>code>./example/d0/Changed.java <=> ./example/d1/Changed.java\r\n9,28a21,22 method added: newMethod()\r\n          this.size = size;\r\n      }\r\n  \r\n!     public &lt;void newMethod() {&gt;\r\n! &lt;    }&gt;\r\n  }\r\n\r\n10c8 implemented type changed from Map to List\r\n  import java.io.File;\r\n  \r\n  abstract public class Changed \r\n!     implements &lt;Map&gt;\r\n   {\r\n  \r\n    public void obsoleteMethod() {\r\n\r\n  import java.util.List;\r\n  import java.util.Map;\r\n  \r\n! public abstract class Changed implements &lt;List&gt; {\r\n      /**\r\n       * The maximum size of this object.\r\n       */\r\n\r\n13,14d8,23 method removed: obsoleteMethod()\r\n      implements Map\r\n   {\r\n  \r\n!   public &lt;void obsoleteMethod() {&gt;\r\n! &lt;  }&gt;\r\n  \r\n    public Changed( int  s ) \r\n     {\r\n\r\n16c17 parameter name changed from s to size\r\n    public void obsoleteMethod() {\r\n    }\r\n  \r\n!   public Changed( int  &lt;s&gt; ) \r\n     {\r\n       size = s;\r\n     }\r\n\r\n      private final int size;\r\n      private int index;\r\n  \r\n!     public Changed(int &lt;size&gt;) {\r\n          this.size = size;\r\n      }\r\n  \r\n\r\n18c18 code changed in Changed(int)\r\n  \r\n    public Changed( int  s ) \r\n     {\r\n!      &lt;size = s&gt;;\r\n     }\r\n  \r\n    private int size;\r\n\r\n      private int index;\r\n  \r\n      public Changed(int size) {\r\n!         &lt;this.size = size&gt;;\r\n      }\r\n  \r\n      public void newMethod() {\r\n\r\n21c14 modifier added: final\r\n       size = s;\r\n     }\r\n  \r\n!   &lt;private&gt; int size;\r\n  \r\n    // @todo - comment this field\r\n    static final public int MAX_SIZE = 317;\r\n\r\n       */\r\n      public final static int MAX_SIZE = 317;\r\n  \r\n!     private &lt;final&gt; int size;\r\n      private int index;\r\n  \r\n      public Changed(int size) {\r\n\r\n26c15 variable changed from idx to index\r\n    // @todo - comment this field\r\n    static final public int MAX_SIZE = 317;\r\n  \r\n!   private int &lt;idx&gt;;\r\n      \r\n  }\r\n\r\n      public final static int MAX_SIZE = 317;\r\n  \r\n      private final int size;\r\n!     private int &lt;index&gt;;\r\n  \r\n      public Changed(int size) {\r\n          this.size = size;\r\n</code></pre>\r\n\r\n**Configuration files**: DiffJ looks for a configuration file as ~/.diffrc, and\r\nuses the name/value pairs there for its options. All options are supported, with\r\nthe syntax \"name: value\". For boolean options (such as\r\n`--highlight`/`--no-highlight`), the value should be either true or false.\r\n\r\nAs an example, the following file sets DiffJ to use the source version as 1.6,\r\nand to show context with non-default colors:\r\n\r\n    context: true\r\n    highlight: true\r\n    from-color: bold blue on green\r\n    to-color: underscore magenta on cyan\r\n\r\nOPTIONS\r\n-------\r\n\r\n    --brief   \r\n        Display output in brief form.\r\n\r\n    --context\r\n        Show context (non-brief form only).\r\n\r\n    --[no-]highlight\r\n        Use colors (context output only).\r\n\r\n    --recurse\r\n        Process directories recursively.\r\n\r\n    --from-source VERSION\r\n        The Java source version of from-file (default: 1.5).\r\n\r\n    --to-source VERSION\r\n        The Java source version of to-file (default: 1.5).\r\n\r\n    --from-color COLOR\r\n        The text color of the from-file text (default: red).\r\n\r\n    --to-color COLOR\r\n        The text color of the to-file text (default: yellow).\r\n\r\n    --source VERSION\r\n        The Java source version of from-file and to-file (default: 1.5).\r\n\r\n    -u\r\n        Output unified context. Unused; exists for compatibility with GNU diff.\r\n\r\n    -L NAME  --name NAME\r\n        Set the first/second name to be displayed. This is useful for diffing\r\n        with an external program, such as svn, where the file names are the temp\r\n        files, and which passes in the real names as arguments.\r\n\r\n    --verbose\r\n        Run in verbose mode (for debugging).\r\n\r\n    -h  --help\r\n        Show help summary.\r\n\r\n    -v  --version\r\n        Display the version.\r\n\r\nEXAMPLES\r\n--------\r\n\r\n    % diffj old/Foo.java new/Foo.java\r\n        Compares the two files, in the brief output format.\r\n\r\n    % diffj --context branches/3.1.4 trunk\r\n        Compares the files in the two directories, reporting their differences\r\n        with context.\r\n\r\n    % diffj --highlight -r branches/3.1.4 branches/3.1.5\r\n        Compares the two directories recursively, reporting their differences\r\n        with context, and changes highlighted.\r\n\r\n    % diffj --highlight --from-color \"bold red on white\" --to-color \"cyan on black\" ../v1.2.3 .\r\n        Displays differences in the given colors.\r\n\r\n    % diffj --from-source 1.4 --to-source 1.6 -r ~myproj/old ~myproj/current\r\n        Compares the code, using Java 1.4 and 1.6 as the source for the from-\r\n        and the to-files.\r\n\r\nDOWNLOAD\r\n--------\r\n\r\n*Source*: \r\n\r\n    *Github*: https://github.com/jeugenepace/diffj\r\n\r\n*Binaries*\r\n\r\n    *Tarball*: \r\n\r\n    *Zip*: \r\n\r\n    *Debian*: \r\n\r\n    *Tarball*: \r\n","tagline":"A command line application to compare Java files without regard to formatting.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}